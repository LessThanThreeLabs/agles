// Generated by IcedCoffeeScript 1.3.3e
(function() {
  var addUserToEvent, areMembersEqual, assert, colors, express, fs, getFullEventFileName, handleEvent, handleRsvp, iced, isUserValid, startServer, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  colors = require('colors');

  assert = require('assert');

  express = require('express');

  startServer = function() {
    var expressServer;
    expressServer = express();
    expressServer.use(express.favicon('front/favicon.ico'));
    expressServer.use(express.bodyParser());
    expressServer.use('/js', express["static"]('front/js'));
    expressServer.use('/css', express["static"]('front/css'));
    expressServer.use('/img', express["static"]('front/img', {
      maxAge: 86400000
    }));
    expressServer.use('/json', express["static"]('front/json'));
    expressServer.get('/', function(request, response) {
      return response.sendfile('front/index.html');
    });
    expressServer.get('/events/:eventName', handleEvent);
    expressServer.post('/rsvp', handleRsvp);
    expressServer.listen(9000);
    return console.log('Server started'.bold.magenta);
  };

  handleRsvp = function(request, response) {
    var errors, fileName, index, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    try {
      if (!isUserValid(request.body.user)) {
        response.end('no user');
        return;
      }
      if (!(request.body.events != null) || request.body.events.length === 0) {
        response.end('no events');
        return;
      }
      if (request.body.user.password !== 'champagne') {
        response.end('invalid password');
        return;
      }
      request.body.events.push('master');
      errors = [];
      (function(__iced_k) {
        var _i, _len, _ref;
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "src/index.coffee",
          funcname: "handleRsvp"
        });
        _ref = request.body.events;
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          fileName = _ref[index];
          addUserToEvent(request.body.user, fileName, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(errors, index),
            lineno: 48
          }));
        }
        __iced_deferrals._fulfill();
      })(function() {
        if (errors.some(function(error) {
          return error != null;
        })) {
          return response.end('bad');
        } else {
          return response.end('ok');
        }
      });
    } catch (error) {
      return response.end('bad');
    }
  };

  addUserToEvent = function(user, fileName, callback) {
    var data, fileExists, fullFileName, members;
    fullFileName = getFullEventFileName(fileName);
    fileExists = fs.existsSync(fullFileName);
    if (fileExists) {
      data = fs.readFileSync(fullFileName, 'ascii');
      members = JSON.parse(data);
    } else {
      members = [];
    }
    if (members.some(function(member) {
      return areMembersEqual(member, user);
    })) {
      callback();
      return;
    }
    members.push(user);
    data = JSON.stringify(members);
    return fs.writeFile(fullFileName, data, 'ascii', function(error) {
      if (error != null) {
        return callback(error);
      } else {
        return callback();
      }
    });
  };

  getFullEventFileName = function(fileName) {
    return 'events/' + fileName + '.json';
  };

  isUserValid = function(user) {
    if (!(user != null)) return false;
    if (!((user != null ? user.firstName : void 0) != null) || (user != null ? user.firstName : void 0) === '') {
      return false;
    }
    if (!((user != null ? user.lastName : void 0) != null) || (user != null ? user.lastName : void 0) === '') {
      return false;
    }
    if (!((user != null ? user.email : void 0) != null) || (user != null ? user.email : void 0) === '') {
      return false;
    }
    if (!((user != null ? user.phoneNumber : void 0) != null) || (user != null ? user.phoneNumber : void 0) === '') {
      return false;
    }
    if (!((user != null ? user.gender : void 0) != null) || (user != null ? user.gender : void 0) === '') {
      return false;
    }
    return true;
  };

  handleEvent = function(request, response) {
    var fullFileName;
    fullFileName = getFullEventFileName(request.params.eventName);
    return fs.readFile(fullFileName, 'ascii', function(error, data) {
      var member, members, stringToReturn, _i, _len;
      if (error != null) {
        return response.end('file does not exist');
      } else {
        members = JSON.parse(data);
        stringToReturn = '';
        for (_i = 0, _len = members.length; _i < _len; _i++) {
          member = members[_i];
          stringToReturn += "" + member.firstName + " " + member.lastName + "\t" + member.email + "\t" + member.phoneNumber + "\t" + member.gender + "\n";
        }
        return response.end(stringToReturn);
      }
    });
  };

  areMembersEqual = function(member1, member2) {
    return member1.email.toLowerCase() === member2.email.toLowerCase() && member1.firstName.toLowerCase() === member2.firstName.toLowerCase() && member1.lastName.toLowerCase() === member2.lastName.toLowerCase();
  };

  startServer();

}).call(this);
