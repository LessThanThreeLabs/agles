// Generated by IcedCoffeeScript 1.3.3e
(function() {
  'use strict';

  describe('Koality filters', function() {
    describe('fileSuffix filter', function() {
      var fileSuffix, suffixString;
      fileSuffix = null;
      suffixString = '_qa8aset32';
      beforeEach(module('koality.filter', function($provide) {
        var mockedInitialState;
        mockedInitialState = {
          fileSuffix: suffixString
        };
        $provide.value('initialState', mockedInitialState);
      }));
      beforeEach(function() {
        return inject(function(fileSuffixFilter) {
          return fileSuffix = fileSuffixFilter;
        });
      });
      it('should correctly add file suffix for valid file urls', function() {
        expect(fileSuffix('hello.png')).toBe("hello" + suffixString + ".png");
        expect(fileSuffix('hello/there.jpg')).toBe("hello/there" + suffixString + ".jpg");
        return expect(fileSuffix('/hello/there/sir.gif')).toBe("/hello/there/sir" + suffixString + ".gif");
      });
      return it('should fail to add the correct file suffix for invalid file urls', function() {
        expect(fileSuffix('hellopng')).toBe('hellopng');
        expect(fileSuffix('hello/therejpg')).toBe('hello/therejpg');
        return expect(fileSuffix('/hello/there/sirgif')).toBe('/hello/there/sirgif');
      });
    });
    return describe('newLine filter', function() {
      beforeEach(module('koality.filter'));
      it('should handle invalid values', function() {
        return inject(function(newLineFilter) {
          expect(newLineFilter(null)).toBe(null);
          expect(newLineFilter(15)).toBe(null);
          expect(newLineFilter(15.1)).toBe(null);
          return expect(newLineFilter({})).toBe(null);
        });
      });
      it('should not change strings without new lines', function() {
        return inject(function(newLineFilter) {
          expect(newLineFilter('')).toBe('');
          expect(newLineFilter('hello')).toBe('hello');
          expect(newLineFilter('hello there')).toBe('hello there');
          expect(newLineFilter(' hello')).toBe(' hello');
          return expect(newLineFilter('hello ')).toBe('hello ');
        });
      });
      return it('should add <br>\'s correctly', function() {
        return inject(function(newLineFilter) {
          expect(newLineFilter('\n')).toBe('<br>');
          expect(newLineFilter('hello\n')).toBe('hello<br>');
          expect(newLineFilter('\nhello')).toBe('<br>hello');
          return expect(newLineFilter('hello\nthere')).toBe('hello<br>there');
        });
      });
    });
  });

}).call(this);
